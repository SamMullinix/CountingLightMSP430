#include "msp430.h"                 	; #define controlled include file
    	NAME	main                	; module name
    	PUBLIC  main                	; make the main label vissible
                                    	; outside this module
    	ORG 	0FFFEh
    	DC16	init                	; set reset vector to 'init' label
    	RSEG	CSTACK              	; pre-declaration of segment
    	RSEG	CODE                	; place program in 'CODE' segment
init:   MOV 	#SFE(CSTACK), SP    	; set up stack
main:   NOP                         	; main program
    	MOV.W   #WDTPW+WDTHOLD,&WDTCTL  ; Stop watchdog timer
    	bis.b #001h, &P1DIR
    	bic.b #008h, &P1DIR
    	bis.b #008h, &P1REN
    	bis.b #008h, &P1IE          	; Open Ports
    	bis.b #008h, &P1IFG
    	BIS.B #008h, &P1OUT
    	xor.b #001, &P1OUT
    	mov.w #00000000h, R8        	; Register to hold incremental value 
    	mov.w #00000000h, R10         ; Check Register 
    	BIS.W #CPUOFF+GIE, SR       	; Enter LPM
    	nop                         	; Skip Cycle
P1_ISR
    	bic.b #008h, &P1IFG 
    	CMP.W #0, R10                 ; Skip first increment compare
    	jz Skip1
    	add.w #1h, R8    	
    	mov.w R8, R9                	; Copy R8 to R9
CHANGEL:xor.b #001, &P1OUT          ; Light toggle on   	
    	mov.w #050000,R15 ; Delay to R15
Wait:   dec.w R15 ; Decrement R15
    	nop
    	nop
    	nop
    	nop
    	nop           ; Skip Cycles
    	nop
    	nop
    	jnz Wait 
CHANGEOFF:xor.b #001, &P1OUT         ; Light toggle off        	
    	mov.w #050000,R15 ; Delay to R15
Wait2:  dec.w R15 ; Decrement R15
    	nop
    	nop
    	nop
    	nop
    	nop       ; Skip Cycles
    	nop
    	nop
    	jnz Wait2
    	dec.w R9
    	jnz CHANGEL
 Skip1:   	
    	mov.w #1, R10                 ; Skip first increment jump location
    	reti                        	; Exit Interrupt
    	
    	COMMON INTVEC
    	ORG RESET_VECTOR            	; Interrupt Vector
VECTOR:
    	ORG PORT1_VECTOR
    	DW P1_ISR
    	JMP $
    	END
